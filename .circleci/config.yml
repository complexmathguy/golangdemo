version: 2.1


references:

working_directory: &working_directory
  /home/circleci/gitRoot/

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
        - *working_directory

jobs: 

  # core job
  build_test_project:

    # assign the working directory
    working_directory: *working_directory
        
    # run the steps with Docker as the primary container
    # job commands run in this container
    # CircleCI Golang
    # Postgres image
    docker:
      - image: circleci/golang:1.16
      - image: postgres
        # required env vars
        environment:
            POSTGRES_DB: golangdemoDB
            POSTGRES_USER: root
            POSTGRES_PASSWORD: letmein2 

    # env var assignments
    environment:
        POSTGRES_DB: golangdemoDB
        POSTGRES_USER: root
        POSTGRES_PASSWORD: letmein2 
        TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    # steps the core build test job
    steps:

      # check out source code to working directory
      - checkout
      # restore the saved cache after the first run or if `pom.xml` has changed
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - *restore_repo
      - run:        
          name: Install Gorilla Mux for as Router
          command: go get github.com/gorilla/mux 
      - run:                  
          name: Install Go ORM...
          command: go get -u gorm.io/gorm
      - run:          
          name: Install Go ORM database type...
          command: go get -u gorm.io/driver/mysql
      - run:          
          name: Install .env reader
          command: go get github.com/joho/godotenv
      - run:          
          name: Change to the app directory
          command: cd src/golangdemo 
      - run:          
          name: Initalize, build, and test
          command: |
            cd src/golangdemo 
            go mod init golangdemo
            go mod tidy
            go build
            go test   
      # cache the entire project 
      - *save_repo
      # Upload test results for display in Test Summary:
      # https://circleci.com/docs/2.0/collect-test-data/
      - store_test_results:
          path: ~/test-results
      # Upload test summary for display in Artifacts:
      # https://circleci.com/docs/2.0/artifacts/
      - store_artifacts:
          path: ~/test-results/junit


  docker_build:
    # assign the working directory
    working_directory: *working_directory

    docker: # run the steps with Docker, this image is not used and therefore ignored
      - image: circleci/python:3.7  
      
    steps:
      - *restore_repo
      - setup_remote_docker
      - run:
          name: creating docker image requiring project env vars DOCKER_USER and DOCKER_PASS
          command: |
            docker login --username tylertravismya --password 69cutlass 
            docker build -t theharbormaster/golangdemo:latest .
            docker push theharbormaster/golangdemo:latest

# simple workflow to build out the environment
workflows:
  version: 2
  build_test_deploy_workflow:
    jobs:
      - build_test_project
      - docker_build:
          requires:
            - build_test_project
